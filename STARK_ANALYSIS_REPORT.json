{
  "summary": {
    "total_files": 29,
    "analyzed_files": 29,
    "total_findings": 238,
    "critical_issues": 17,
    "high_issues": 107,
    "mock_components": 43,
    "average_quality": 51.41379310344828,
    "average_complexity": 43.0103448275862,
    "average_maintenance": 61.67758620689656
  },
  "detailed_results": [
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\LAUNCHER_MAIN.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 55, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\LAUNCHER_MAIN.py'}, {'type': 'mock_detection', 'line': 68, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\LAUNCHER_MAIN.py'}, {'type': 'security_risks', 'line': 116, 'content': 'choice = input(\"\\\\n\ud83d\udd37 Selecciona una opci\u00f3n: \").strip()', 'pattern': 'input\\\\([^)]*\\\\)', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\LAUNCHER_MAIN.py'}, {'type': 'security_risks', 'line': 133, 'content': 'input(\"\\\\nPresiona Enter para continuar...\")', 'pattern': 'input\\\\([^)]*\\\\)', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\LAUNCHER_MAIN.py'}, {'type': 'deep_nesting', 'line': 112, 'content': 'Deep nesting detected (depth: 6)', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\LAUNCHER_MAIN.py'}], recommendations=['Implement 2 mock components with real functionality', 'Address security vulnerabilities by avoiding eval/exec and validating inputs', 'Reduce code complexity by extracting nested logic into separate methods'], complexity_score=25.1, quality_score=36, maintenance_score=59.45)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 292, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'mock_detection', 'line': 628, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'mock_detection', 'line': 894, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'mock_detection', 'line': 1041, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'mock_detection', 'line': 1193, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'mock_detection', 'line': 1314, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'performance_issues', 'line': 606, 'content': 'self.frame_buffer.append(frame)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'performance_issues', 'line': 731, 'content': 'self.voice_queue.append(text)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'performance_issues', 'line': 1020, 'content': 'self.worker_threads.append(worker)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'performance_issues', 'line': 1054, 'content': 'self.completed_tasks.append(task)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'performance_issues', 'line': 1060, 'content': 'self.failed_tasks.append(task)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'performance_issues', 'line': 1141, 'content': 'self.experiences.append(experience)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'performance_issues', 'line': 612, 'content': 'time.sleep(0.033)  # ~30 FPS', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'performance_issues', 'line': 924, 'content': 'time.sleep(self.save_interval)', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'performance_issues', 'line': 1029, 'content': 'time.sleep(0.1)', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'security_risks', 'line': 1406, 'content': 'response = input(\"\\\\n\u00bfEjecutar conversi\u00f3n masiva? (s/N): \")', 'pattern': 'input\\\\([^)]*\\\\)', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'complexity_indicators', 'line': 464, 'content': 'def convert_mock_to_real(self, file_path: str, component_type: str = \"auto\") -> bool:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'complexity_indicators', 'line': 516, 'content': 'def _generate_real_implementation(self, component_type: str, current_code: str, file_path: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'complexity_indicators', 'line': 776, 'content': 'def __init__(self, input_size: int = 100, hidden_size: int = 50, output_size: int = 10):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'complexity_indicators', 'line': 865, 'content': 'def store(self, key: str, value: Any, memory_type: str = \"short\"):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'complexity_indicators', 'line': 967, 'content': 'def __init__(self, name: str, func: Callable, priority: TaskPriority = TaskPriority.MEDIUM, **kwargs):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'complexity_indicators', 'line': 1005, 'content': 'def add_task(self, name: str, func: Callable, priority: TaskPriority = TaskPriority.MEDIUM, **kwargs) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'complexity_indicators', 'line': 1084, 'content': 'def add_task(name: str, func: Callable, priority: str = \"medium\", **kwargs) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'complexity_indicators', 'line': 1130, 'content': 'def learn_from_experience(self, context: str, action: str, result: str, success: bool):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'long_method', 'line': 386, 'content': \"Function 'convert_mock_to_real' is too long (76 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'long_method', 'line': 532, 'content': \"Function '_generate_vision_system' is too long (154 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'long_method', 'line': 688, 'content': \"Function '_generate_audio_system' is too long (71 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'long_method', 'line': 761, 'content': \"Function '_generate_neural_system' is too long (64 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'long_method', 'line': 827, 'content': \"Function '_generate_memory_system' is too long (115 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'long_method', 'line': 944, 'content': \"Function '_generate_task_manager' is too long (149 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'long_method', 'line': 1095, 'content': \"Function '_generate_learning_system' is too long (138 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'long_method', 'line': 1235, 'content': \"Function '_generate_generic_system' is too long (68 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}, {'type': 'deep_nesting', 'line': 501, 'content': 'Deep nesting detected (depth: 5)', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_agent.py'}], recommendations=['Implement 6 mock components with real functionality', 'Optimize performance bottlenecks using list comprehensions and proper resource management', 'Address security vulnerabilities by avoiding eval/exec and validating inputs', 'Refactor long methods into smaller, focused functions', 'Reduce code complexity by extracting nested logic into separate methods'], complexity_score=100, quality_score=0, maintenance_score=0)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 31, 'content': \"r'# TODO:',\", 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'mock_detection', 'line': 32, 'content': \"r'# PLACEHOLDER',\", 'pattern': '# PLACEHOLDER', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'mock_detection', 'line': 33, 'content': \"r'raise NotImplementedError',\", 'pattern': 'raise NotImplementedError', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'performance_issues', 'line': 211, 'content': 'by_type[finding_type].append(finding)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'performance_issues', 'line': 215, 'content': 'recommendations.append(f\"Implement {len(by_type[\\'mock_detection\\'])} mock components with real functionality\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'performance_issues', 'line': 218, 'content': 'recommendations.append(\"Optimize performance bottlenecks using list comprehensions and proper resource management\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'performance_issues', 'line': 221, 'content': 'recommendations.append(\"Address security vulnerabilities by avoiding eval/exec and validating inputs\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'performance_issues', 'line': 224, 'content': 'recommendations.append(\"Refactor long methods into smaller, focused functions\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'performance_issues', 'line': 227, 'content': 'recommendations.append(\"Reduce code complexity by extracting nested logic into separate methods\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'performance_issues', 'line': 309, 'content': 'results.append(result)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'performance_issues', 'line': 341, 'content': 'all_findings.append(finding)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'complexity_indicators', 'line': 54, 'content': \"r'try:\\\\s*.*except.*:\\\\s*.*except',  # Multiple exceptions\", 'pattern': 'try:\\\\s*.*except.*:\\\\s*.*except', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'complexity_indicators', 'line': 231, 'content': 'def _calculate_complexity_score(self, content: str, findings: List[Dict[str, Any]]) -> float:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}, {'type': 'complexity_indicators', 'line': 260, 'content': 'def _calculate_maintenance_score(self, content: str, findings: List[Dict[str, Any]]) -> float:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_analyzer.py'}], recommendations=['Implement 3 mock components with real functionality', 'Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=69.0, quality_score=8, maintenance_score=60.5)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 214, 'content': \"'pass  # TODO:',\", 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'mock_detection', 'line': 216, 'content': \"'# PLACEHOLDER',\", 'pattern': '# PLACEHOLDER', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'mock_detection', 'line': 213, 'content': \"'raise NotImplementedError',\", 'pattern': 'raise NotImplementedError', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'performance_issues', 'line': 265, 'content': 'self.task_queue.append(task)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'performance_issues', 'line': 280, 'content': 'self.task_queue.append(task)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'performance_issues', 'line': 295, 'content': 'self.task_queue.append(task)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'performance_issues', 'line': 343, 'content': 'self.completed_tasks.append(task)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'long_method', 'line': 247, 'content': \"Function 'generate_intelligent_tasks' is too long (51 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'deep_nesting', 'line': 140, 'content': 'Deep nesting detected (depth: 6)', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'deep_nesting', 'line': 180, 'content': 'Deep nesting detected (depth: 6)', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'deep_nesting', 'line': 220, 'content': 'Deep nesting detected (depth: 6)', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'deep_nesting', 'line': 143, 'content': 'Deep nesting detected (depth: 5)', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'deep_nesting', 'line': 183, 'content': 'Deep nesting detected (depth: 5)', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}, {'type': 'deep_nesting', 'line': 223, 'content': 'Deep nesting detected (depth: 5)', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_brain.py'}], recommendations=['Implement 3 mock components with real functionality', 'Optimize performance bottlenecks using list comprehensions and proper resource management', 'Refactor long methods into smaller, focused functions', 'Reduce code complexity by extracting nested logic into separate methods'], complexity_score=100, quality_score=0, maintenance_score=54.35)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 458, 'content': \"(r'# PLACEHOLDER.*', '# Real implementation')\", 'pattern': '# PLACEHOLDER', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'mock_detection', 'line': 456, 'content': '(r\\'return None  # Mock.*\\', \\'raise NotImplementedError(\"Real implementation needed\")\\'),', 'pattern': 'raise NotImplementedError', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'mock_detection', 'line': 457, 'content': '(r\\'pass  # TODO.*\\', \\'raise NotImplementedError(\"Implementation pending\")\\'),', 'pattern': 'raise NotImplementedError', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'mock_detection', 'line': 227, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'mock_detection', 'line': 306, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'mock_detection', 'line': 309, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'mock_detection', 'line': 421, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'mock_detection', 'line': 445, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'performance_issues', 'line': 435, 'content': 'response = requests.get(url, headers=headers, timeout=30)', 'pattern': 'requests\\\\.(get|post)\\\\([^)]*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'performance_issues', 'line': 437, 'content': 'response = requests.post(url, json=data, headers=headers, timeout=30)', 'pattern': 'requests\\\\.(get|post)\\\\([^)]*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}, {'type': 'complexity_indicators', 'line': 122, 'content': 'async def perform_conversion(self, content: str, component_type: str, file_path: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_converter.py'}], recommendations=['Implement 8 mock components with real functionality', 'Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=56.6, quality_score=62, maintenance_score=31.7)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 104, 'content': '\"# TODO: Implement\",', 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'mock_detection', 'line': 237, 'content': '\"pass  # TODO:\",', 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 51, 'content': 'all_components.append(component)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 135, 'content': 'self.errors.append(f\"Error verificando mock en {file_path}: {e}\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 174, 'content': 'results[\"failed\"].append({\"component\": component, \"error\": str(result)})', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 176, 'content': 'results[\"success\"].append(component)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 179, 'content': 'results[\"failed\"].append({\"component\": component, \"error\": result.get(\"error\", \"Unknown\")})', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 251, 'content': 'sys.path.append(os.path.join(self.workspace_path, \"agents\"))', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 260, 'content': 'self.errors.append(result.get(\"error\", \"Unknown error\"))', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 266, 'content': 'self.errors.append(error_msg)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 292, 'content': 'results[\"components_processed\"].append(component)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'performance_issues', 'line': 299, 'content': 'results[\"errors\"].append(conversion_result.get(\"error\"))', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}, {'type': 'syntax_error', 'line': 83, 'content': 'Syntax error: unexpected indent', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_coordinator.py'}], recommendations=['Implement 2 mock components with real functionality', 'Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=32.1, quality_score=0, maintenance_score=68.95)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 349, 'content': '# TODO: Implementar inicializaci\u00f3n espec\u00edfica', 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 368, 'content': \"# TODO: Implementar {method['name']}\", 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 384, 'content': '# TODO: Implementar l\u00f3gica principal', 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 401, 'content': '# TODO: Agregar l\u00f3gica de uso espec\u00edfica', 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 637, 'content': '# TODO: Implementar extracci\u00f3n de caracter\u00edsticas espec\u00edfica', 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 642, 'content': '# TODO: Implementar c\u00e1lculo de utilidad espec\u00edfico', 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 647, 'content': '# TODO: Implementar ejecuci\u00f3n de acciones espec\u00edficas', 'pattern': '# TODO:', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 369, 'content': 'raise NotImplementedError(f\"{{self.__class__.__name__}}.{method[\\'name\\']} needs implementation\")', 'pattern': 'raise NotImplementedError', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 388, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 758, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'mock_detection', 'line': 761, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'performance_issues', 'line': 604, 'content': 'self.decision_history.append(decision)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'performance_issues', 'line': 1043, 'content': 'self.data_history.append(metrics_data)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 134, 'content': 'async def create_implementation(self, file_path: str, requirement_description: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 424, 'content': 'def __init__(self, input_size={{input_size}}, hidden_size={{hidden_size}}, output_size={{output_size}}):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 447, 'content': 'async def train(self, X_train, y_train, X_val=None, y_val=None, epochs=100):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 488, 'content': 'def __init__(self, input_source={{input_source}}, resolution={{resolution}}):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 559, 'content': 'def __init__(self, agent_id: str, max_iterations={{max_iterations}}, learning_rate={{learning_rate}}):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 656, 'content': 'def __init__(self, db_name=\"{{db_name}}\", compression={{compression}}):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 692, 'content': 'async def store(self, key: str, value: Any, tags: List[str] = None) -> bool:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 803, 'content': 'async def speak(self, text: str, voice_profile: str = None, emotion: str = \"neutral\"):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 925, 'content': 'def __init__(self, learning_rate={{learning_rate}}, epochs={{epochs}}):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 947, 'content': 'def __init__(self, sample_rate={{sample_rate}}, n_mels={{n_mels}}):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 991, 'content': 'def __init__(self, max_concurrent={{max_concurrent}}, timeout={{timeout}}):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'complexity_indicators', 'line': 1018, 'content': 'def __init__(self, interval={{interval}}, metrics=\"{{metrics}}\"):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'long_method', 'line': 27, 'content': \"Function '__init__' is too long (105 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'long_method', 'line': 419, 'content': \"Function 'neural_network_template' is too long (62 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'long_method', 'line': 483, 'content': \"Function 'vision_processor_template' is too long (69 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'long_method', 'line': 554, 'content': \"Function 'intelligent_agent_template' is too long (95 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'long_method', 'line': 651, 'content': \"Function 'memory_manager_template' is too long (126 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}, {'type': 'long_method', 'line': 1013, 'content': \"Function 'performance_monitor_template' is too long (54 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_creator.py'}], recommendations=['Implement 11 mock components with real functionality', 'Optimize performance bottlenecks using list comprehensions and proper resource management', 'Refactor long methods into smaller, focused functions'], complexity_score=100, quality_score=22, maintenance_score=0)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 259, 'content': 'imports.append(alias.name)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 263, 'content': 'imports.append(f\"{node.module}.{alias.name}\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 291, 'content': 'filtered_lines.append(line)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 315, 'content': 'imports.append(line)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 317, 'content': 'other_lines.append(line)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 320, 'content': 'imports.append(line)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 322, 'content': 'other_lines.append(line)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 325, 'content': 'other_lines.append(line)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 340, 'content': 'stdlib_imports.append(imp)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 342, 'content': 'local_imports.append(imp)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 344, 'content': 'third_party_imports.append(imp)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 355, 'content': \"ordered_imports.append('')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 358, 'content': \"ordered_imports.append('')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 361, 'content': \"ordered_imports.append('')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'performance_issues', 'line': 464, 'content': 'used.append(name)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'complexity_indicators', 'line': 94, 'content': 'async def optimize_code(self, file_path: str, optimization_type: str = \"all\") -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'complexity_indicators', 'line': 210, 'content': 'async def apply_regex_optimization(self, content: str, opt_config: Dict, opt_name: str, category: str) -> Dict[str, Any]:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}, {'type': 'syntax_error', 'line': 410, 'content': 'Syntax error: unexpected character after line continuation character', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_optimizer.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=70, quality_score=0, maintenance_score=68.9)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 366, 'content': 'import_lines.append((line_num, stripped))', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py'}, {'type': 'performance_issues', 'line': 517, 'content': \"names.append(name.split('.')[0])\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py'}, {'type': 'performance_issues', 'line': 526, 'content': 'names.append(name)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py'}, {'type': 'security_risks', 'line': 52, 'content': \"'description': 'Uso peligroso de eval()',\", 'pattern': 'eval\\\\(', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py'}, {'type': 'security_risks', 'line': 53, 'content': \"'suggestion': 'Usar ast.literal_eval() o validaci\u00f3n espec\u00edfica'\", 'pattern': 'eval\\\\(', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py'}, {'type': 'security_risks', 'line': 58, 'content': \"'description': 'Uso peligroso de exec()',\", 'pattern': 'exec\\\\(', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py'}, {'type': 'security_risks', 'line': 59, 'content': \"'suggestion': 'Evitar exec() y usar alternativas seguras'\", 'pattern': 'exec\\\\(', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py'}, {'type': 'complexity_indicators', 'line': 394, 'content': 'async def generate_review_report(self, issues: List[CodeIssue], file_path: str, content: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py'}, {'type': 'long_method', 'line': 43, 'content': \"Function '__init__' is too long (93 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\autoprogrammer_reviewer.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management', 'Address security vulnerabilities by avoiding eval/exec and validating inputs', 'Refactor long methods into smaller, focused functions'], complexity_score=70, quality_score=0, maintenance_score=65.8)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 382, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'mock_detection', 'line': 395, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'mock_detection', 'line': 642, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 180, 'content': 'self.conversion_history.append(result)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 196, 'content': \"dependencies.append(match.group(1).split(',')[0].strip())\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 779, 'content': 'self.worker_pool.append(worker)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 817, 'content': 'self.completed_tasks.append(task)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 834, 'content': 'self.failed_tasks.append(task)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 1128, 'content': 'changes.append(f\"rate: {{rate}}\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 1133, 'content': 'changes.append(f\"volume: {{volume}}\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 1140, 'content': 'changes.append(f\"voice: {{voice_index}}\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 1169, 'content': 'voice_list.append(voice_info)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 1315, 'content': 'self.learning_stats[\"accuracy_scores\"].append(accuracy)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 923, 'content': 'time.sleep(duration)', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'performance_issues', 'line': 943, 'content': 'time.sleep(3.5)', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 292, 'content': 'async def process_command(self, command: str, context: Optional[Dict] = None) -> Dict[str, Any]:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 355, 'content': 'def _generate_setup_method(self, component_name: str, template: Dict[str, Any]) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 479, 'content': 'def _generate_specialized_implementation(self, component_type: str, current_content: str, component_path: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 497, 'content': 'def _generate_vision_implementation(self, template: Dict, current_content: str, path: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 540, 'content': 'def process_image(self, image_path: str = None, image_array: np.ndarray = None) -> Dict[str, Any]:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 688, 'content': 'def _generate_task_implementation(self, template: Dict, current_content: str, path: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 721, 'content': 'def __init__(self, name: str, function: Callable, args: tuple = (), kwargs: dict = None,', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 841, 'content': 'def add_task(self, name: str, function: Callable, args: tuple = (), kwargs: dict = None,', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 958, 'content': 'def _generate_audio_implementation(self, template: Dict, current_content: str, path: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 1105, 'content': 'def process_voice(self, audio_data: bytes = None, file_path: str = None) -> Dict[str, Any]:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 1117, 'content': 'def set_voice_properties(self, rate: int = None, volume: float = None, voice_index: int = None) -> Dict[str, Any]:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 1249, 'content': 'def _generate_ml_implementation(self, template: Dict, current_content: str, path: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 1281, 'content': 'def train_model(self, model_name: str, data: List[List], labels: List, model_type: str = \"classification\") -> Dict[str, Any]:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 1409, 'content': 'def _generate_memory_implementation(self, template: Dict, current_content: str, path: str) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'complexity_indicators', 'line': 1466, 'content': 'def store_data(self, key: str, value: Any, expiry_hours: int = None) -> Dict[str, Any]:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}, {'type': 'syntax_error', 'line': 434, 'content': 'Syntax error: unexpected indent', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\integrator_agent.py'}], recommendations=['Implement 3 mock components with real functionality', 'Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=100, quality_score=0, maintenance_score=0)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\mass_converter.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 12, 'content': 'sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\mass_converter.py'}, {'type': 'security_risks', 'line': 43, 'content': 'response = input(f\"\\\\n\u00bfProceder con conversi\u00f3n masiva de {len(mock_components)} componentes? (s/N): \")', 'pattern': 'input\\\\([^)]*\\\\)', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\mass_converter.py'}, {'type': 'security_risks', 'line': 58, 'content': \"os.system('python system/state_analyzer.py')\", 'pattern': 'os\\\\.system\\\\(', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\mass_converter.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management', 'Address security vulnerabilities by avoiding eval/exec and validating inputs'], complexity_score=6.9, quality_score=40, maintenance_score=88)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\task_manager.py', analysis_type='comprehensive', findings=[], recommendations=[], complexity_score=0.1, quality_score=100, maintenance_score=52)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\agents\\\\_MAIN.py', analysis_type='comprehensive', findings=[], recommendations=[], complexity_score=25.2, quality_score=100, maintenance_score=82.4)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 119, 'content': 'self.available_voices.append(voice_info)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'performance_issues', 'line': 250, 'content': 'self.available_voices.append(voice_info)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'performance_issues', 'line': 549, 'content': 'self.speech_queue.append(request)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'performance_issues', 'line': 731, 'content': 'self.speech_callbacks.append(callback)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'performance_issues', 'line': 608, 'content': 'time.sleep(0.1)  # Esperar si no hay solicitudes', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'performance_issues', 'line': 612, 'content': 'time.sleep(0.5)', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'performance_issues', 'line': 773, 'content': 'time.sleep(3)', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'performance_issues', 'line': 776, 'content': 'time.sleep(3)', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'performance_issues', 'line': 779, 'content': 'time.sleep(3)', 'pattern': 'time\\\\.sleep\\\\(', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'long_method', 'line': 427, 'content': \"Function '_create_default_profiles' is too long (62 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'long_method', 'line': 614, 'content': \"Function '_process_speech_request' is too long (62 lines)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}, {'type': 'too_many_params', 'line': 693, 'content': \"Function 'create_voice_profile' has too many parameters (9)\", 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\voice_synthesis.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management', 'Refactor long methods into smaller, focused functions'], complexity_score=70, quality_score=4, maintenance_score=55.65)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\communication\\\\_MAIN.py', analysis_type='comprehensive', findings=[], recommendations=[], complexity_score=18.5, quality_score=100, maintenance_score=85.75)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\intelligence\\\\_MAIN.py', analysis_type='comprehensive', findings=[{'type': 'complexity_indicators', 'line': 166, 'content': 'def learn_from_decision(self, decision: Dict[str, Any], context: Dict[str, Any]):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\intelligence\\\\_MAIN.py'}], recommendations=[], complexity_score=31.4, quality_score=98, maintenance_score=84.3)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\copilot_core.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 130, 'content': \"patterns.append('AI coordination pattern detected')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\copilot_core.py'}, {'type': 'performance_issues', 'line': 133, 'content': \"patterns.append('Neural module pattern detected')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\copilot_core.py'}, {'type': 'performance_issues', 'line': 136, 'content': \"patterns.append('STARK Industries pattern detected')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\copilot_core.py'}, {'type': 'performance_issues', 'line': 303, 'content': 'patterns.append(extension)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\copilot_core.py'}, {'type': 'complexity_indicators', 'line': 159, 'content': 'def _estimate_execution_time(self, complexity: float, resource_intensity: float) -> str:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\copilot_core.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=44.5, quality_score=58, maintenance_score=57.75)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\copilot_core_fixed.py', analysis_type='comprehensive', findings=[], recommendations=[], complexity_score=0.1, quality_score=100, maintenance_score=50)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\friday_core.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 130, 'content': 'vulnerabilities.append(f\"Potential {vuln_type} vulnerability detected\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\friday_core.py'}, {'type': 'performance_issues', 'line': 293, 'content': \"health_factors.append('cpu_healthy')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\friday_core.py'}, {'type': 'performance_issues', 'line': 296, 'content': \"health_factors.append('memory_healthy')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\friday_core.py'}, {'type': 'performance_issues', 'line': 317, 'content': \"bottlenecks.append('High CPU usage detected')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\friday_core.py'}, {'type': 'performance_issues', 'line': 320, 'content': \"bottlenecks.append('Memory usage approaching limit')\", 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\friday_core.py'}, {'type': 'performance_issues', 'line': 335, 'content': 'recommendations.append(\"Consider CPU optimization or load balancing\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\friday_core.py'}, {'type': 'performance_issues', 'line': 338, 'content': 'recommendations.append(\"Implement memory optimization strategies\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\friday_core.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=41.4, quality_score=30, maintenance_score=66.3)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\jarvis_core.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 118, 'content': 'recommendations.append(\"Coordinate with FRIDAY for security validation\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\jarvis_core.py'}, {'type': 'performance_issues', 'line': 119, 'content': 'recommendations.append(\"Leverage COPILOT for implementation optimization\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\jarvis_core.py'}, {'type': 'performance_issues', 'line': 170, 'content': 'insights.append(\"Implement with Tony Stark\\'s engineering principles\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\jarvis_core.py'}, {'type': 'performance_issues', 'line': 172, 'content': 'insights.append(\"Apply multi-dimensional analysis framework\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\jarvis_core.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=26.7, quality_score=60, maintenance_score=81.65)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\learning_engine.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 394, 'content': 'old_patterns.append(pattern_id)', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\learning_engine.py'}, {'type': 'security_risks', 'line': 252, 'content': 'def learn_from_input(self, data: Any, strategy: str = \"adaptive_learning\") -> bool:', 'pattern': 'input\\\\([^)]*\\\\)', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\learning_engine.py'}, {'type': 'security_risks', 'line': 320, 'content': 'self.learn_from_input(interaction_data, \"pattern_recognition\")', 'pattern': 'input\\\\([^)]*\\\\)', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\learning_engine.py'}, {'type': 'security_risks', 'line': 321, 'content': 'self.learn_from_input(interaction_data, \"adaptive_learning\")', 'pattern': 'input\\\\([^)]*\\\\)', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\learning_engine.py'}, {'type': 'security_risks', 'line': 424, 'content': 'engine.learn_from_input(data)', 'pattern': 'input\\\\([^)]*\\\\)', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\learning_engine.py'}, {'type': 'complexity_indicators', 'line': 252, 'content': 'def learn_from_input(self, data: Any, strategy: str = \"adaptive_learning\") -> bool:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\learning_engine.py'}, {'type': 'complexity_indicators', 'line': 310, 'content': 'def learn_from_interaction(self, user_input: str, system_response: str, feedback: str = None):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\learning_engine.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management', 'Address security vulnerabilities by avoiding eval/exec and validating inputs'], complexity_score=63.7, quality_score=0, maintenance_score=73.15)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\memory_manager.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 141, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\memory_manager.py'}, {'type': 'mock_detection', 'line': 145, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\memory_manager.py'}, {'type': 'complexity_indicators', 'line': 74, 'content': 'def store_long_term(self, key: str, value: Any, importance: float = 0.5) -> bool:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\memory_manager.py'}, {'type': 'complexity_indicators', 'line': 147, 'content': 'def store_working_memory(self, session_id: str, key: str, value: Any, ttl_minutes: int = 60) -> bool:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\memory_manager.py'}], recommendations=['Implement 2 mock components with real functionality'], complexity_score=42.4, quality_score=92, maintenance_score=73.8)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\neural_network.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 31, 'content': 'layers.append(nn.Linear(prev_size, output_size))', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\neural_network.py'}, {'type': 'performance_issues', 'line': 69, 'content': 'history[\"loss\"].append(loss.item())', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\neural_network.py'}, {'type': 'performance_issues', 'line': 70, 'content': 'history[\"accuracy\"].append(accuracy.item())', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\neural_network.py'}, {'type': 'security_risks', 'line': 82, 'content': 'self.eval()', 'pattern': 'eval\\\\(', 'severity': 'critical', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\neural_network.py'}, {'type': 'complexity_indicators', 'line': 15, 'content': 'def __init__(self, input_size: int = 512, hidden_sizes: List[int] = [256, 128, 64], output_size: int = 10):', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\neural_network.py'}, {'type': 'complexity_indicators', 'line': 48, 'content': 'def train_network(self, train_data: torch.Tensor, train_labels: torch.Tensor, epochs: int = 100) -> Dict[str, List[float]]:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\neural_network.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management', 'Address security vulnerabilities by avoiding eval/exec and validating inputs'], complexity_score=31.7, quality_score=41, maintenance_score=83.15)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\_MAIN.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 215, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\_MAIN.py'}, {'type': 'performance_issues', 'line': 12, 'content': 'sys.path.append(str(Path(__file__).parent.parent))', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\neural\\\\_MAIN.py'}], recommendations=['Implement 1 mock components with real functionality', 'Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=21.9, quality_score=88, maintenance_score=77.05)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\perception\\\\vision_system.py', analysis_type='comprehensive', findings=[], recommendations=[], complexity_score=0.1, quality_score=100, maintenance_score=52)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\perception\\\\_MAIN.py', analysis_type='comprehensive', findings=[], recommendations=[], complexity_score=15.6, quality_score=100, maintenance_score=83.2)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\memory_manager.py', analysis_type='comprehensive', findings=[{'type': 'mock_detection', 'line': 141, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\memory_manager.py'}, {'type': 'mock_detection', 'line': 145, 'content': 'return None', 'pattern': 'return\\\\s+None\\\\s*$', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\memory_manager.py'}, {'type': 'complexity_indicators', 'line': 74, 'content': 'def store_long_term(self, key: str, value: Any, importance: float = 0.5) -> bool:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\memory_manager.py'}, {'type': 'complexity_indicators', 'line': 147, 'content': 'def store_working_memory(self, session_id: str, key: str, value: Any, ttl_minutes: int = 60) -> bool:', 'pattern': 'def\\\\s+\\\\w+\\\\([^)]{50,}\\\\)', 'severity': 'medium', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\memory_manager.py'}], recommendations=['Implement 2 mock components with real functionality'], complexity_score=42.4, quality_score=92, maintenance_score=73.8)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\state_analyzer.py', analysis_type='comprehensive', findings=[{'type': 'performance_issues', 'line': 141, 'content': 'issues.append(f\"Module {module_name} not active\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\state_analyzer.py'}, {'type': 'performance_issues', 'line': 147, 'content': 'issues.append(f\"AI {ai_name} not operational\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\state_analyzer.py'}, {'type': 'performance_issues', 'line': 152, 'content': 'issues.append(\"High mock component ratio - needs real implementations\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\state_analyzer.py'}, {'type': 'performance_issues', 'line': 206, 'content': 'formatted.append(f\"{module_name.upper()}: {status_icon} {completion} complete\")', 'pattern': '\\\\.append\\\\(.*\\\\)\\\\s*$', 'severity': 'high', 'file_path': 'c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\state_analyzer.py'}], recommendations=['Optimize performance bottlenecks using list comprehensions and proper resource management'], complexity_score=22.5, quality_score=60, maintenance_score=73.75)",
    "AnalysisResult(file_path='c:\\\\Users\\\\basti\\\\Desktop\\\\Proyecto Jarvis y FRIDAY\\\\system\\\\_MAIN.py', analysis_type='comprehensive', findings=[], recommendations=[], complexity_score=19.4, quality_score=100, maintenance_score=85.3)"
  ],
  "top_issues": [
    {
      "type": "security_risks",
      "line": 116,
      "content": "choice = input(\"\\n\ud83d\udd37 Selecciona una opci\u00f3n: \").strip()",
      "pattern": "input\\([^)]*\\)",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\LAUNCHER_MAIN.py"
    },
    {
      "type": "security_risks",
      "line": 133,
      "content": "input(\"\\nPresiona Enter para continuar...\")",
      "pattern": "input\\([^)]*\\)",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\LAUNCHER_MAIN.py"
    },
    {
      "type": "security_risks",
      "line": 1406,
      "content": "response = input(\"\\n\u00bfEjecutar conversi\u00f3n masiva? (s/N): \")",
      "pattern": "input\\([^)]*\\)",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\autoprogrammer_agent.py"
    },
    {
      "type": "syntax_error",
      "line": 83,
      "content": "Syntax error: unexpected indent",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\autoprogrammer_coordinator.py"
    },
    {
      "type": "syntax_error",
      "line": 410,
      "content": "Syntax error: unexpected character after line continuation character",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\autoprogrammer_optimizer.py"
    },
    {
      "type": "security_risks",
      "line": 52,
      "content": "'description': 'Uso peligroso de eval()',",
      "pattern": "eval\\(",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\autoprogrammer_reviewer.py"
    },
    {
      "type": "security_risks",
      "line": 53,
      "content": "'suggestion': 'Usar ast.literal_eval() o validaci\u00f3n espec\u00edfica'",
      "pattern": "eval\\(",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\autoprogrammer_reviewer.py"
    },
    {
      "type": "security_risks",
      "line": 58,
      "content": "'description': 'Uso peligroso de exec()',",
      "pattern": "exec\\(",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\autoprogrammer_reviewer.py"
    },
    {
      "type": "security_risks",
      "line": 59,
      "content": "'suggestion': 'Evitar exec() y usar alternativas seguras'",
      "pattern": "exec\\(",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\autoprogrammer_reviewer.py"
    },
    {
      "type": "syntax_error",
      "line": 434,
      "content": "Syntax error: unexpected indent",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\integrator_agent.py"
    },
    {
      "type": "security_risks",
      "line": 43,
      "content": "response = input(f\"\\n\u00bfProceder con conversi\u00f3n masiva de {len(mock_components)} componentes? (s/N): \")",
      "pattern": "input\\([^)]*\\)",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\mass_converter.py"
    },
    {
      "type": "security_risks",
      "line": 58,
      "content": "os.system('python system/state_analyzer.py')",
      "pattern": "os\\.system\\(",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\mass_converter.py"
    },
    {
      "type": "security_risks",
      "line": 252,
      "content": "def learn_from_input(self, data: Any, strategy: str = \"adaptive_learning\") -> bool:",
      "pattern": "input\\([^)]*\\)",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\neural\\learning_engine.py"
    },
    {
      "type": "security_risks",
      "line": 320,
      "content": "self.learn_from_input(interaction_data, \"pattern_recognition\")",
      "pattern": "input\\([^)]*\\)",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\neural\\learning_engine.py"
    },
    {
      "type": "security_risks",
      "line": 321,
      "content": "self.learn_from_input(interaction_data, \"adaptive_learning\")",
      "pattern": "input\\([^)]*\\)",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\neural\\learning_engine.py"
    },
    {
      "type": "security_risks",
      "line": 424,
      "content": "engine.learn_from_input(data)",
      "pattern": "input\\([^)]*\\)",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\neural\\learning_engine.py"
    },
    {
      "type": "security_risks",
      "line": 82,
      "content": "self.eval()",
      "pattern": "eval\\(",
      "severity": "critical",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\neural\\neural_network.py"
    },
    {
      "type": "deep_nesting",
      "line": 112,
      "content": "Deep nesting detected (depth: 6)",
      "severity": "high",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\LAUNCHER_MAIN.py"
    },
    {
      "type": "performance_issues",
      "line": 606,
      "content": "self.frame_buffer.append(frame)",
      "pattern": "\\.append\\(.*\\)\\s*$",
      "severity": "high",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\autoprogrammer_agent.py"
    },
    {
      "type": "performance_issues",
      "line": 731,
      "content": "self.voice_queue.append(text)",
      "pattern": "\\.append\\(.*\\)\\s*$",
      "severity": "high",
      "file_path": "c:\\Users\\basti\\Desktop\\Proyecto Jarvis y FRIDAY\\agents\\autoprogrammer_agent.py"
    }
  ],
  "recommendations": [
    "Address security vulnerabilities by avoiding eval/exec and validating inputs",
    "Reduce code complexity by extracting nested logic into separate methods",
    "Implement 1 mock components with real functionality",
    "Implement 8 mock components with real functionality",
    "Implement 2 mock components with real functionality",
    "Implement 6 mock components with real functionality",
    "Refactor long methods into smaller, focused functions",
    "Implement 11 mock components with real functionality",
    "Implement 3 mock components with real functionality",
    "Optimize performance bottlenecks using list comprehensions and proper resource management"
  ]
}