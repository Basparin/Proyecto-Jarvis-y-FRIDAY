# filepath: agents/mass_converter.py
"""
STARK MASS CONVERTER - Ejecutor de Conversi√≥n Masiva
Lanza conversi√≥n masiva y eficiente de componentes mock ‚Üí real
"""
import asyncio
import sys
import os
from datetime import datetime

# Agregar directorio padre al path para imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from autoprogrammer_coordinator import StarkAutoprogrammerCoordinator
from integrator_agent import IntegratorAgent

async def main():
    """Funci√≥n principal de conversi√≥n masiva"""
    print("üöÄ STARK INDUSTRIES - MASS MOCK CONVERTER")
    print("=" * 50)
    print(f"Inicio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # Inicializar coordinador
        coordinator = StarkAutoprogrammerCoordinator()
          # An√°lisis inicial
        print("\nüìä AN√ÅLISIS INICIAL DEL SISTEMA...")
        mock_data = coordinator.detect_mock_components()
        mock_components = mock_data['components']
        
        print(f"Componentes mock detectados: {mock_data['total_found']}")
          # Mostrar componentes por prioridad
        high_priority = [c for c in mock_components if c.get("priority", "MEDIUM") == "HIGH"]
        medium_priority = [c for c in mock_components if c.get("priority", "MEDIUM") == "MEDIUM"]
        low_priority = [c for c in mock_components if c.get("priority", "MEDIUM") == "LOW"]
        
        print(f"‚Ä¢ Prioridad ALTA: {len(high_priority)}")
        print(f"‚Ä¢ Prioridad MEDIA: {len(medium_priority)}")
        print(f"‚Ä¢ Prioridad BAJA: {len(low_priority)}")
        
        # Confirmar conversi√≥n
        response = input(f"\n¬øProceder con conversi√≥n masiva de {len(mock_components)} componentes? (s/N): ")
        
        if response.lower() not in ['s', 'si', 's√≠', 'y', 'yes']:
            print("‚ùå Conversi√≥n cancelada por el usuario")
            return
        
        # Ejecutar conversi√≥n masiva
        print("\nüéØ INICIANDO CONVERSI√ìN MASIVA...")
        results = await coordinator.mass_convert_mocks(max_concurrent=3)
        
        # Mostrar reporte final
        print("\n" + coordinator.generate_conversion_report(results))
        
        # Ejecutar an√°lisis post-conversi√≥n
        print("\nüìä AN√ÅLISIS POST-CONVERSI√ìN...")
        os.system('python system/state_analyzer.py')
        
        print(f"\n‚úÖ CONVERSI√ìN MASIVA COMPLETADA")
        print(f"Fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN CONVERSI√ìN MASIVA: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
